# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: "JF-CLI: PY Flask TODO list app"
on:
# TURN-OFF on every push 
  push:
    branches: 
    #  - nobuildonpush
      - main
    paths-ignore: # When the below folders are checked-in, the GitHub Actions job will not start.
    #  - '.github/**'
      - '.jfrog/**'
  pull_request:
    branches: [ main ]
# issue_comment triggers this action on each comment on issues and pull requests
  issue_comment:
    types: [created]
  pull_request_target:
    types: [opened, synchronize]
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read
  security-events: write # Required for uploading code scanning.
jobs:
  pyPackage:
    name: Python
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        java: [17 ]
        include:
          - language: ['java-kotlin']
            build-mode: none 
    env:  
      PY_VERSION: '3.11'
      JF_RT_URL: https://${{vars.JF_NAME}}.jfrog.io
      RT_REPO_PY_VIRTUAL: "krishnam-py-virtual"
      RT_REPO_PY_DEV_LOCAL: "krishnam-py-dev-local"
      RT_REPO_DOCKER_VIRTUAL: "krishnam-docker-virtual"
      RT_REPO_DOCKER_DEV_LOCAL: "krishnam-docker-dev-local"
      DOCKER_BUILDX_PLATFORMS: 'linux/amd64,linux/arm64'
      DOCKER_METADATA_JSON: 'build-metadata.json'
      EVIDENCE_ARTIFACT_JSON: 'evd-artifact.json'
      EVIDENCE_PACKAGE_JSON: 'evd-package.json'
      EVIDENCE_BUILD_JSON: 'evd-build.json'
      EVIDENCE_RBv2C_JSON: 'evd-rbv2c.json'
      EVIDENCE_KEY_ALIAS: "${{secrets.EVIDENCE_KEY_ALIAS}}" # ref https://jfrog.com/help/r/jfrog-artifactory-documentation/evidence-setup
      RBV2_SIGNING_KEY: "${{secrets.RBV2_SIGNING_KEY}}" # ref https://jfrog.com/help/r/jfrog-artifactory-documentation/create-signing-keys-for-release-bundles-v2
      JOB_SUMMARY: false
      JFROG_CLI_LOG_LEVEL: DEBUG # DEBUG, INFO, WARN, ERROR
      MODULE_NAME: "module-flask-todo"
      BUILD_NAME: "flask-todo"
      BUILD_ID: "ga-${{github.run_number}}" # ref: https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#github-context
    runs-on: ${{matrix.os}}
    timeout-minutes: 30   # ref  https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idtimeout-minutes
    steps:
      # Use the specific setup-cli branch. Ref https://github.com/marketplace/actions/setup-jfrog-cli
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: ${{env.JF_RT_URL}}
          JFROG_CLI_RELEASES_REPO: '${{env.JF_RT_URL}}/artifactory/${{env.RT_REPO_PY_VIRTUAL}}' 
          JFROG_CLI_EXTRACTORS_REMOTE: '${{env.JF_RT_URL}}/artifactory/${{env.RT_REPO_PY_VIRTUAL}}'
          JF_GIT_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          version: latest  #2.71.0
          oidc-provider-name: ${{vars.JF_OIDC_PROVIDER_NAME}}

      - name: Clone VCS
        uses: actions/checkout@v4 # ref: https://github.com/actions/checkout

      - name: Python with ver = ${{env.PY_VERSION}} 
        uses: actions/setup-python@v5   # ref https://github.com/actions/setup-python
        with:
          python-version: ${{env.PY_VERSION}}  

      - name: Software version
        run: |
          # JFrog CLI version
          jf --version
          # Ping the server
          jf rt ping
          # Docker
          docker -v
          # Python
          python3 -V
          pip3 -V
          # jf config
          jf config show

      - name: Config jf with PY repos
        run: |
          export JFROG_CLI_LOG_LEVEL=${{env.JFROG_CLI_LOG_LEVEL}}
          export JFROG_CLI_LOG_TIMESTAMP=DATE_AND_TIME

          jf pipc --repo-resolve=${{env.RT_REPO_PY_VIRTUAL}} --repo-deploy=${{env.RT_REPO_PY_VIRTUAL}}

      - name: Create ENV variables
        run: |
          echo "RT_REPO_DOCKER_URL=${{vars.JF_NAME}}.jfrog.io/${{env.RT_REPO_DOCKER_VIRTUAL}}/${{env.BUILD_NAME}}:${{env.BUILD_ID}}" >> $GITHUB_ENV
          echo "RBv2_SPEC_JSON=RBv2-SPEC-${{env.BUILD_ID}}.json" >> $GITHUB_ENV

      - name: Docker authentication  # ref https://github.com/marketplace/actions/docker-login
        id: config-docker
        uses: docker/login-action@v3
        with: 
          registry: ${{env.JF_RT_URL}}
          username: ${{steps.setup-cli.outputs.oidc-user}}
          password: ${{steps.setup-cli.outputs.oidc-token}}

      - name: Docker buildx instance
        uses: docker/setup-buildx-action@v3   # ref: https://github.com/marketplace/actions/docker-setup-buildx h
        with:
          use: true
          platforms: ${{env.DOCKER_BUILDX_PLATFORMS}} # linux/amd64,linux/arm64 # ref: https://docs.docker.com/reference/cli/docker/buildx/create/#platform
          install: true

      - name: list folder
        run: |
          pwd
          SPLIT_STR=($(echo "${GITHUB_REPOSITORY}" | tr "/" "\n"))
          echo "SPLIT_STR: ${SPLIT_STR}"
          echo "SPLIT_STR[2]: ${SPLIT_STR[2]}"
          echo "REPO_NAME=${SPLIT_STR[2]}" >> $GITHUB_ENV

          echo "OIDC_PROVIDER_NAME = ${{vars.JF_OIDC_PROVIDER_NAME}}"
          echo "GITHUB_REPOSITORY = $GITHUB_REPOSITORY"
          echo "GITHUB_SHA = $GITHUB_SHA"
          echo "GITHUB_REPOSITORY_ID = $GITHUB_REPOSITORY_ID"
          echo "REPO_NAME = $REPO_NAME" 

          cd /home/runner/work/pyflask-todolist/pyflask-todolist

      - name: "PY: prestep-summary"
        run: |
          echo "# :frog: PY: Prestep Summary :pushpin:" >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " - Installed JFrog CLI [$(jf --version)](https://jfrog.com/getcli/) and PythoN [${{env.PY_PROVIDER}}](https://github.com/actions/setup-python) v${{env.PY_VERSION}} " >> $GITHUB_STEP_SUMMARY
          echo "    - $(jf --version) " >> $GITHUB_STEP_SUMMARY
          echo "    - $(python -V) " >> $GITHUB_STEP_SUMMARY
          echo "    - $(pip -V) " >> $GITHUB_STEP_SUMMARY
          echo "    - $(docker -v) " >> $GITHUB_STEP_SUMMARY
          echo " - Docker buildx configured with platforms: [${{env.DOCKER_BUILDX_PLATFORMS}}](https://docs.docker.com/reference/cli/docker/buildx/create/#platform) " >> $GITHUB_STEP_SUMMARY
          echo " - Configured the JFrog Cli and Docker login with SaaS Artifactory OIDC integration  " >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " - Variables info" >> $GITHUB_STEP_SUMMARY
          echo "    - ID: ${{env.BUILD_ID}} " >> $GITHUB_STEP_SUMMARY
          echo "    - Build Name: ${{env.BUILD_NAME}} " >> $GITHUB_STEP_SUMMARY
          echo "    - PY Repo URL: ${{env.RT_REPO_PY_VIRTUAL}}" >> $GITHUB_STEP_SUMMARY
          echo "    - Docker Repo URL: ${{env.RT_REPO_DOCKER_VIRTUAL}}" >> $GITHUB_STEP_SUMMARY
          echo "    - Docker URL: ${{env.RT_REPO_DOCKER_URL}}" >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " - Evidence Info: " >> $GITHUB_STEP_SUMMARY

      # Package
      - name: Curation  # https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/cli-for-jfrog-security/cli-for-jfrog-curation
        timeout-minutes: 15
        run: |
          jf ca --format=table --threads=10

      - name: "Xray & JAS: Audit"  # https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/cli-for-jfrog-security
        # scan for Xray: Source code dependencies and JAS: Secrets Detection, IaC, Vulnerabilities Contextual Analysis 'SAST'
        timeout-minutes: 15    
        run: |
          jf audit --pip --sast=true --sca=true --secrets=true --licenses=true --validate-secrets=true --vuln=true --format=table --extended-table=true --threads=100 --fail=false

      - name: "Package: Create PY Build"
        run: |    
          jf pip install -r test-requirements.txt --build-name=${{env.BUILD_NAME}} --build-number=${{env.BUILD_ID}} --module=${{env.MODULE_NAME}}
          export FLASK_APP=./todolist.py

      - name: "Optional: Compile PY code" 
        run: |
          python -m compileall -l ./app/ 

      - name: "Optional: UnitTests PY " 
        run: |
          python -m unittest tests/test_basics.py 
          python -m unittest tests/test_client.py 
          python -m unittest tests/test_api.py 

      - name: "Package: Xray - PY Artifact scan"
        timeout-minutes: 15   # ref https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idstepstimeout-minutes
        run: |
          jf scan . --format=table --extended-table=true --threads=100 --fail=false

      - name: "Package: Docker build and push"
        run: |
          docker image build -f my-files/Dockerfile-cli -t ${{env.RT_REPO_DOCKER_URL}} --platform "${{env.DOCKER_BUILDX_PLATFORMS}}" --metadata-file "${{env.DOCKER_METADATA_JSON}}" --push .

      - name: "Optional: Docker pull image"
        run: |
          docker pull ${{env.RT_REPO_DOCKER_URL}}

      # - name: "Package: upload PY artifacts"
      #   run: |
      #     jf rt u dist/ pypi/ --build-name=${{env.BUILD_NAME}} --build-number=${{env.BUILD_ID}} --module=${{env.MODULE_NAME}}

      - name: "Package: Docker image list"
        run: |
          docker image ls

      # Evidence - Package references
      #     Docs# https://jfrog.com/help/r/jfrog-artifactory-documentation/evidence-management
      #     CLI# https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/binaries-management-with-jfrog-artifactory/evidence-service
      # jf evd create --predicate ./evd-package.json --predicate-type https://jfrog.com/evidence/build-signature/v1 --package-name spring-petclinic --package-version evd.2025-01-31-14-53 --package-repo-name "krishnam-docker-virtual" --key ~/.ssh/jfrog_evd_public.pem --key-alias "KRISHNAM_JFROG_EVD_PUBLICKEY"
      - name: "Evidence: Package"
        run: |
          echo '{ "actor": "${{github.actor}}", "pipeline": "github actions","build_name": "${{env.BUILD_NAME}}", "build_id": "${{env.BUILD_ID}}", "evd":"Evidence-Package", "package":"${{env.RT_REPO_DOCKER_URL}}" }' > ./${{env.EVIDENCE_PACKAGE_JSON}}
          cat ./${{env.EVIDENCE_PACKAGE_JSON}}
          jf evd create --package-name ${{env.BUILD_NAME}} --package-version ${{env.BUILD_ID}} --package-repo-name ${{env.RT_REPO_DOCKER_VIRTUAL}} --key "${{secrets.KRISHNAM_JFROG_EVD_PRIVATEKEY}}"  --key-alias ${{env.EVIDENCE_KEY_ALIAS}} --predicate ./${{env.EVIDENCE_PACKAGE_JSON}} --predicate-type https://jfrog.com/evidence/signature/v1 
          echo "    - 🔎 Evidence attached on PACKAGE: signature 🔏 " >> $GITHUB_STEP_SUMMARY

      - name: "Package: Xray - docker Artifact scan"
        timeout-minutes: 15    # ref https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idstepstimeout-minutes
        run: |
          jf docker scan ${{env.RT_REPO_DOCKER_URL}} --build-name ${{env.BUILD_NAME}} --build-number ${{env.BUILD_ID}} --format=table --extended-table=true --threads=100 --fail=false  --detailed-summary=true  --vuln=true --licenses=true
      
      - name: "Optional: Set env vars for BuildInfo"   # These properties were captured in Builds >> spring-petclinic >> version >> Environment tab
        run: |
          export job="github-action" org="ps" team="architecture" product="jfrog-saas" 

      # Build Info
          # US 
          #     Executive Order: 
          #       https://www.whitehouse.gov/briefing-room/presidential-actions/2021/05/12/executive-order-on-improving-the-nations-cybersecurity/
          #       https://www.nist.gov/itl/executive-order-14028-improving-nations-cybersecurity
          #    US Dept of Commerce: https://www.ntia.gov/page/software-bill-materials
          #    US Cyber Defence Agency: https://www.cisa.gov/sbom
          #    NIST: https://www.nist.gov/itl/executive-order-14028-improving-nations-cybersecurity/software-security-supply-chains-software-1
          #    NITA: https://www.ntia.gov/page/software-bill-materials 
          #    Centers for Medicare & Medicaid Services: https://security.cms.gov/learn/software-bill-materials-sbom
          # India
          #    CERT-IN: https://www.cert-in.org.in/sbom/
      - name: "BuildInfo: Collect env"
        run: jf rt bce ${{env.BUILD_NAME}} ${{env.BUILD_ID}} 
 
      - name: "BuildInfo: Add VCS info"
        run: jf rt bag ${{env.BUILD_NAME}} ${{env.BUILD_ID}} 

      - name: "BuildInfo: Docker build create"
        run: |
          imageDigest=$(cat "${{env.DOCKER_METADATA_JSON}}" | jq '.["containerimage.digest"]')
          echo "${imageDigest}"

          echo "${{env.RT_REPO_DOCKER_URL}}@${imageDigest}" > ${{env.DOCKER_METADATA_JSON}}

          jf rt bdc ${{env.RT_REPO_DOCKER_VIRTUAL}} --image-file ${{env.DOCKER_METADATA_JSON}} --build-name=${{env.BUILD_NAME}} --build-number=${{env.BUILD_ID}}

      - name: "BuildInfo: Build Publish"
        run: jf rt bp ${{env.BUILD_NAME}} ${{env.BUILD_ID}} --detailed-summary=true

      # Evidence - Build references
      #     Docs# https://jfrog.com/help/r/jfrog-artifactory-documentation/evidence-management
      #     CLI# https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/binaries-management-with-jfrog-artifactory/evidence-service
      - name: "Evidence: Build Publish"
        run: |
          echo '{ "actor": "${{github.actor}}", "pipeline": "github actions","build_name": "${{env.BUILD_NAME}}", "build_id": "${{env.BUILD_ID}}", "evd": "Evidence-BuildPublish"}' > ./${{env.EVIDENCE_BUILD_JSON}}
          cat ./${{env.EVIDENCE_BUILD_JSON}}
          jf evd create --build-name ${{env.BUILD_NAME}} --build-number ${{env.BUILD_ID}} --predicate ./${{env.EVIDENCE_BUILD_JSON}} --predicate-type https://jfrog.com/evidence/build-signature/v1 --key "${{secrets.KRISHNAM_JFROG_EVD_PRIVATEKEY}}" --key-alias ${{env.EVIDENCE_KEY_ALIAS}}
          echo "    - 🔎 Evidence attached on BUILD Publish: signature 🔏 " >> $GITHUB_STEP_SUMMARY

      # curl -L 'https://psazuse.jfrog.io/xray/api/v1/binMgr/builds' -H 'Content-Type: application/json' -H 'Authorization: ••••••' -d '{  "names": ["spring-petclinic"] }'
      - name: "Optional: Add Builds to Indexing Configuration"
        run: |
          jf xr curl "/api/v1/binMgr/builds" -H 'Content-Type: application/json' -d '{"names": ["${{env.BUILD_NAME}}"] }'
      # Set properties      
      - name: "Optional: Set prop for Artifact"  # These properties were captured Artifacts >> repo path 'spring-petclinic.---.jar' >> Properties
        run: |
          ts="cmd.$(date '+%Y-%m-%d-%H-%M')" 
          jf rt sp "job=github-action;env=demo;org=ps;team=arch;pack_cat=webapp;build=maven;product=artifactory;features=package,buildinfo;ts=ts-${BUILD_ID}" --build="${{env.BUILD_NAME}}/${{env.BUILD_ID}}"

      - name: "Optional: Query build info"
        env: 
          BUILD_INFO_JSON: "BuildInfo-${{env.BUILD_ID}}.json"
        run: |
           jf rt curl "/api/build/${{env.BUILD_NAME}}/${{env.BUILD_ID}}" -o $BUILD_INFO_JSON
           cat $BUILD_INFO_JSON

           sleep 20   # Sleeping for 20 seconds before executing the build publish seems to have resolved the build-scan issue. This delay might be helping with synchronization or resource availability, ensuring a smooth build process.

      - name: "Optional: Query - Build Scan status"
        run: |
          jf xr curl "/api/v1/build/status" -H 'Content-Type: application/json' -d '{"name": "${{env.BUILD_NAME}}", "number": "${{env.BUILD_ID}}" }'
 
      - name: "BuildInfo: Xray - Build scan"
        timeout-minutes: 15    # ref https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idstepstimeout-minutes
        run: |
          jf bs ${{env.BUILD_NAME}} ${{env.BUILD_ID}} --fail=false --format=table --extended-table=true --rescan=false --vuln=true

      - name: "Optional: Build Scan V2"  # https://jfrog.com/help/r/xray-rest-apis/scan-build-v2
        # jf xr curl /api/v2/ci/build -H 'Content-Type: application/json' -d '{"build_name": "spring-petclinic", "build_number": "ga-gdl-xray-50","rescan":true }'
        run: |
          jf xr curl /api/v2/ci/build -H 'Content-Type: application/json' -d '{"build_name": "${{env.BUILD_NAME}}", "build_number": "${{env.BUILD_ID}}","rescan":false  }'

      # Release Bundle v2
      - name: "RLM: RBv2 spec - create"
        run: |
          echo "{ \"files\": [ {\"build\": \"${{env.BUILD_NAME}}/${{env.BUILD_ID}}\" } ] }"  > ${{env.RBv2_SPEC_JSON}}
          cat ${{env.RBv2_SPEC_JSON}}

      - name: "RLM: RBv2 Create NEW"
        run: |
          jf rbc ${{env.BUILD_NAME}} ${{env.BUILD_ID}} --sync=true --signing-key=${{env.RBV2_SIGNING_KEY}} --spec=${{env.RBv2_SPEC_JSON}}

      # Evidence - RBv2 new references
      #     Docs# https://jfrog.com/help/r/jfrog-artifactory-documentation/evidence-management
      #     CLI# https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/binaries-management-with-jfrog-artifactory/evidence-service
      - name: "Evidence: RBv2"
        env:
          JF_LINK: "${{env.JF_RT_URL}}/ui/artifactory/lifecycle/?bundleName='${{env.BUILD_NAME}}'&bundleToFlash='${{env.BUILD_NAME}}'&releaseBundleVersion='${{env.BUILD_ID}}'&repositoryKey=release-bundles-v2&activeVersionTab=Version%20Timeline&activeKanbanTab=promotion"
        run: |
          echo '{ "actor": "${{github.actor}}", "pipeline": "github actions", "build_name": "${{env.BUILD_NAME}}", "build_id": "${{env.BUILD_ID}}", "evd": "Evidence-RBv2", "rbv2_stage": "NEW" }' > ./${{env.EVIDENCE_RBv2C_JSON}}
          cat ./${{env.EVIDENCE_RBv2C_JSON}}
          jf evd create --release-bundle ${{env.BUILD_NAME}} --release-bundle-version ${{env.BUILD_ID}} --predicate ./${{env.EVIDENCE_RBv2C_JSON}} --predicate-type https://jfrog.com/evidence/rbv2-new/v1 --key "${{secrets.KRISHNAM_JFROG_EVD_PRIVATEKEY}}" --key-alias ${{env.EVIDENCE_KEY_ALIAS}}
          echo "    - 🔎 Evidence attached on RBv2: signature 🔏 "
          echo "      - ${{env.JF_LINK}}"

      - name: "RLM: RBv2 promote DEV"
        run: |
          jf rbp ${{env.BUILD_NAME}} ${{env.BUILD_ID}} DEV --sync=true --signing-key=${{env.RBV2_SIGNING_KEY}}  

      - name: "RLM: RBv2 promote QA"
        run: |
          jf rbp ${{env.BUILD_NAME}} ${{env.BUILD_ID}} QA --sync=true --signing-key=${{env.RBV2_SIGNING_KEY}}  

      - name: "RLM: RBv2 promote PROD"
        run: |
          jf rbp ${{env.BUILD_NAME}} ${{env.BUILD_ID}} PROD --sync=true --signing-key=${{env.RBV2_SIGNING_KEY}}  

      # ref: https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/binaries-management-with-jfrog-artifactory/release-lifecycle-management#distribute-a-release-bundle-v2
      - name: "RLM: RBv2 Distribute to SaaS edges"
        run: |
          jf rbd ${{env.BUILD_NAME}} ${{env.BUILD_ID}} --sync=true --create-repo=true

      - name: "Optional: rbv2-summary"
        env:
          PROMOTIONS_URL: "${{env.JF_RT_URL}}/ui/artifactory/lifecycle/?bundleName=${{env.BUILD_NAME}}&repositoryKey=release-bundles-v2&activeKanbanTab=promotion"
          VER_LINK: "${{env.JF_RT_URL}}/ui/artifactory/lifecycle/?bundleName=${{env.BUILD_NAME}}&repositoryKey=release-bundles-v2&activeKanbanTab=promotion&range=Last%2030%20Days&activeVersionTab=Version%20Timeline&releaseBundleVersion=${{env.BUILD_ID}}"
          DISTRIBUTIONS_URL: "${{env.JF_RT_URL}}/ui/artifactory/lifecycle/?bundleName=${{env.BUILD_NAME}}&repositoryKey=release-bundles-v2&activeKanbanTab=distribution"
        run: |
          echo "# :frog:📦 Release Bundle v2 Summary :rocket: " >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          # echo "<details><summary>The RBv2 artifacts has elevated to the subsequent stages</summary>" >> $GITHUB_STEP_SUMMARY
          echo "The Build Artifacts has elevated to the subsequent stages" >> $GITHUB_STEP_SUMMARY
          RB2_STATUS_RESP=$(curl -v -G ${JF_RT_URL}/lifecycle/api/v2/promotion/records/${BUILD_NAME}/${BUILD_ID}?async=false -H 'Content-Type:  application/json' -H "Authorization: Bearer ${{steps.setup-cli.outputs.oidc-token}}")
          echo $RB2_STATUS_RESP > RBv2_STATUS-${{env.BUILD_ID}}.json
          cat RBv2_STATUS-${{env.BUILD_ID}}.json 
          # export RB2_STATUS=$(echo $RB2_STATUS_RESP | jq -r '.promotions[0].environment')
          items=$(echo "$RB2_STATUS_RESP" | jq -c -r '.promotions[]')
          for item in ${items[@]}; do
            # {"status":"COMPLETED","repository_key":"release-bundles-v2","release_bundle_name":"spring-petclinic-ga","release_bundle_version":"58","environment":"QA","service_id":"s","created_by":"token:***","created":"2024-09-21T00:53:57.326Z","created_millis":1726880037326,"xray_retrieval_status":"RECEIVED"}
            envVal=$(echo $item | jq -r '.environment')
            crtVal=$(echo $item | jq -r '.created')
            echo " - ${envVal} on ${crtVal} " >> $GITHUB_STEP_SUMMARY
          done
          echo "  - Release bundle: [${{env.BUILD_NAME}}](${{env.PROMOTIONS_URL}}) " >> $GITHUB_STEP_SUMMARY
          echo "  - Distribution bundle: [${{env.BUILD_NAME}}](${{env.DISTRIBUTIONS_URL}}) " >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY

      # Query build 
      - name: "Optional: Query build info"
        env: 
          BUILD_INFO_JSON: "BuildInfo-${{env.BUILD_ID}}.json"
        run: |
           jf rt curl "/api/build/${{env.BUILD_NAME}}/${{env.BUILD_ID}}" -o $BUILD_INFO_JSON
           cat $BUILD_INFO_JSON
      # Query build 
      
      # ref: https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/binaries-management-with-jfrog-artifactory/release-lifecycle-management#download-release-bundle-v2-content
      - name: "Download RBv2"
        env: 
          BUILD_INFO_JSON: "BuildInfo-${{env.BUILD_ID}}.json"
        run: |
           jf rt dl --bundle ${{env.BUILD_NAME}}/${{env.BUILD_ID}} --threads=10
           
